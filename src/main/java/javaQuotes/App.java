/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javaQuotes;

import com.google.gson.Gson;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class App {
    public static void main(String[] args) {
//        try {
//            JsonQuote[] quotes = jsonParse(args[0]);
//            JsonQuote output = randomQuote(Math.random(), quotes);
//            System.out.println(output);
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        }

        String apiURL = "https://favqs.com/api/qotd";
        URL url;
        try {
            url = new URL(apiURL);
            String JOSON = getJSONfromApi(url);
            GenericQuote[] quotesArray = getQuoteFromJOSON(JOSON);
            GenericQuote output = randomQuote(Math.random(), quotesArray);
            System.out.println(output);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static JsonQuote[] jsonParse(String path) throws FileNotFoundException {
        Gson gson = new Gson();
        BufferedReader reader = new BufferedReader(new FileReader(path));
        JsonQuote[] output = gson.fromJson(reader, JsonQuote[].class);
        return output;
    }

    public static GenericQuote randomQuote(double random, GenericQuote[] quotes) {
        int randomIndex = (int) (random * quotes.length);
        GenericQuote output = quotes[randomIndex];
        return output;
    }

    public static String getJSONfromApi(URL url) throws IOException {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        try {
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Token token = \"28eb745aa9f46544cb25d1f2cd2c82be\"");
            int status = connection.getResponseCode();
            if (status == 200) {
                try (BufferedReader reader = getBufferedReader(connection)) {
                    return dataFromBufferedReader(reader);
                }
            } else {
                System.out.println("Error " + status + ". Showing offline quote.");
            }
        } catch (Exception e) {
            try {
                BufferedReader reader = localGetBufferedReader("src/main/resources/recentquotes.json");
                return dataFromBufferedReader(reader);
            } catch (Exception z) {
                z.getMessage();
            }

        } finally {
            connection.disconnect();
        }
        return null;
    }

    public static BufferedReader getBufferedReader(HttpURLConnection connection) throws IOException {
        InputStream inputStream = connection.getInputStream();
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        return reader;
    }

    public static BufferedReader localGetBufferedReader(String path) throws Exception {
        BufferedReader reader = new BufferedReader(new FileReader(path));
        return reader;
    }

    public static String dataFromBufferedReader(BufferedReader reader) throws IOException {
        StringBuilder builder = new StringBuilder();
        String currentLine = reader.readLine();
        while (currentLine != null) {
            builder.append(currentLine);
            currentLine = reader.readLine();
        }
        return builder.toString();
    }

    public static GenericQuote[] getQuoteFromJOSON(String JOSON) {
        Gson gson = new Gson();
        return gson.fromJson(JOSON, GenericQuote[].class);
    }


}
